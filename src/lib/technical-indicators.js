// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

/**
 * Simple Moving Average (SMA)
 */
const calculateSMA = (prices, period) => {
  if (prices.length < period) return null;
  
  const sum = prices.slice(-period).reduce((acc, price) => acc + price, 0);
  return sum / period;
};

/**
 * Exponential Moving Average (EMA)
 */
const calculateEMA = (prices, period) => {
  if (prices.length < period) return null;
  
  const multiplier = 2 / (period + 1);
  let ema = prices[0];
  
  for (let i = 1; i < prices.length; i++) {
    ema = (prices[i] * multiplier) + (ema * (1 - multiplier));
  }
  
  return ema;
};

/**
 * Relative Strength Index (RSI)
 */
const calculateRSI = (prices, period = 14) => {
  if (prices.length < period + 1) return null;
  
  let gains = 0;
  let losses = 0;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  for (let i = 1; i <= period; i++) {
    const change = prices[i] - prices[i - 1];
    if (change > 0) gains += change;
    else losses += Math.abs(change);
  }
  
  let avgGain = gains / period;
  let avgLoss = losses / period;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
  for (let i = period + 1; i < prices.length; i++) {
    const change = prices[i] - prices[i - 1];
    const gain = change > 0 ? change : 0;
    const loss = change < 0 ? Math.abs(change) : 0;
    
    avgGain = ((avgGain * (period - 1)) + gain) / period;
    avgLoss = ((avgLoss * (period - 1)) + loss) / period;
  }
  
  if (avgLoss === 0) return 100;
  
  const rs = avgGain / avgLoss;
  return 100 - (100 / (1 + rs));
};

/**
 * MACD (Moving Average Convergence Divergence)
 */
const calculateMACD = (prices, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) => {
  if (prices.length < slowPeriod) return null;
  
  const ema12 = calculateEMA(prices, fastPeriod);
  const ema26 = calculateEMA(prices, slowPeriod);
  
  if (!ema12 || !ema26) return null;
  
  const macdLine = ema12 - ema26;
  
  // –î–ª—è signal line –Ω—É–∂–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ MACD –∑–Ω–∞—á–µ–Ω–∏—è
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ MACD line
  return {
    macd: macdLine,
    signal: null, // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
    histogram: null // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
  };
};

/**
 * Bollinger Bands
 */
const calculateBollingerBands = (prices, period = 20, stdDev = 2) => {
  if (prices.length < period) return null;
  
  const sma = calculateSMA(prices, period);
  if (!sma) return null;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
  const recentPrices = prices.slice(-period);
  const variance = recentPrices.reduce((acc, price) => {
    return acc + Math.pow(price - sma, 2);
  }, 0) / period;
  
  const standardDeviation = Math.sqrt(variance);
  
  return {
    upper: sma + (standardDeviation * stdDev),
    middle: sma,
    lower: sma - (standardDeviation * stdDev)
  };
};

/**
 * Stochastic Oscillator
 */
const calculateStochastic = (highs, lows, closes, kPeriod = 14, dPeriod = 3) => {
  if (highs.length < kPeriod) return null;
  
  const recentHighs = highs.slice(-kPeriod);
  const recentLows = lows.slice(-kPeriod);
  const recentCloses = closes.slice(-kPeriod);
  
  const highestHigh = Math.max(...recentHighs);
  const lowestLow = Math.min(...recentLows);
  const currentClose = recentCloses[recentCloses.length - 1];
  
  const k = ((currentClose - lowestLow) / (highestHigh - lowestLow)) * 100;
  
  return {
    k: k,
    d: null // –£–ø—Ä–æ—â–µ–Ω–Ω–æ - –Ω—É–∂–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ K –∑–Ω–∞—á–µ–Ω–∏—è
  };
};

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
 */
const analyzeTrend = (prices) => {
  const sma20 = calculateSMA(prices, 20);
  const sma50 = calculateSMA(prices, 50);
  const currentPrice = prices[prices.length - 1];
  
  if (!sma20 || !sma50) return 'NEUTRAL';
  
  let trendScore = 0;
  
  // –¶–µ–Ω–∞ –≤—ã—à–µ/–Ω–∏–∂–µ SMA20
  if (currentPrice > sma20) trendScore += 1;
  else if (currentPrice < sma20) trendScore -= 1;
  
  // –¶–µ–Ω–∞ –≤—ã—à–µ/–Ω–∏–∂–µ SMA50
  if (currentPrice > sma50) trendScore += 1;
  else if (currentPrice < sma50) trendScore -= 1;
  
  // SMA20 –≤—ã—à–µ/–Ω–∏–∂–µ SMA50
  if (sma20 > sma50) trendScore += 1;
  else if (sma20 < sma50) trendScore -= 1;
  
  if (trendScore >= 2) return 'BULLISH';
  if (trendScore <= -2) return 'BEARISH';
  return 'NEUTRAL';
};

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
 */
const analyzeSignal = (prices, highs = null, lows = null) => {
  if (prices.length < 50) return null;
  
  const indicators = {
    rsi: calculateRSI(prices),
    macd: calculateMACD(prices),
    bollinger: calculateBollingerBands(prices),
    sma20: calculateSMA(prices, 20),
    sma50: calculateSMA(prices, 50),
    trend: analyzeTrend(prices)
  };
  
  let signalScore = 50; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç
  let confidence = 50;
  let reasoning = [];
  
  // RSI –∞–Ω–∞–ª–∏–∑
  if (indicators.rsi !== null) {
    if (indicators.rsi < 30) {
      signalScore += 15; // –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π BUY
      reasoning.push(`rsiOversold:${indicators.rsi.toFixed(1)}`);
    } else if (indicators.rsi > 70) {
      signalScore -= 15; // –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π SELL
      reasoning.push(`rsiOverbought:${indicators.rsi.toFixed(1)}`);
    }
  }
  
  // MACD –∞–Ω–∞–ª–∏–∑
  if (indicators.macd && indicators.macd.macd !== null) {
    if (indicators.macd.macd > 0) {
      signalScore += 10; // MACD –≤—ã—à–µ –Ω—É–ª—è - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
      reasoning.push(`macdBullish:${indicators.macd.macd.toFixed(4)}`);
    } else {
      signalScore -= 10; // MACD –Ω–∏–∂–µ –Ω—É–ª—è - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
      reasoning.push(`macdBearish:${indicators.macd.macd.toFixed(4)}`);
    }
  }
  
  // Bollinger Bands –∞–Ω–∞–ª–∏–∑
  if (indicators.bollinger) {
    const currentPrice = prices[prices.length - 1];
    const { upper, lower, middle } = indicators.bollinger;
    
    if (currentPrice > upper) {
      signalScore -= 10; // –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
      reasoning.push(`bollingerUpper:${currentPrice.toFixed(4)}`);
    } else if (currentPrice < lower) {
      signalScore += 10; // –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
      reasoning.push(`bollingerLower:${currentPrice.toFixed(4)}`);
    }
  }
  
  // –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑
  if (indicators.trend === 'BULLISH') {
    signalScore += 15;
    reasoning.push('trendBullish');
  } else if (indicators.trend === 'BEARISH') {
    signalScore -= 15;
    reasoning.push('trendBearish');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
  let signal = 'NEUTRAL';
  if (signalScore > 65) {
    signal = 'BUY';
    confidence = Math.min(95, 60 + (signalScore - 65) * 1.5);
  } else if (signalScore < 35) {
    signal = 'SELL';
    confidence = Math.min(95, 60 + (35 - signalScore) * 1.5);
  } else {
    confidence = 50 - Math.abs(signalScore - 50) * 0.5;
  }
  
  return {
    signal,
    confidence: Math.round(confidence),
    score: Math.round(signalScore),
    reasoning: reasoning.join(', '),
    indicators
  };
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */
const getHistoricalDataForAnalysis = async (pair, limit = 100) => {
  try {
    // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance
    if (pair.includes('USDT')) {
      const axios = require('axios');
      const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=${pair}&interval=1h&limit=${limit}`);
      const data = response.data;
      
      return {
        prices: data.map(k => parseFloat(k[4])), // Close prices
        highs: data.map(k => parseFloat(k[2])),  // High prices
        lows: data.map(k => parseFloat(k[3])),   // Low prices
        volumes: data.map(k => parseFloat(k[5])) // Volumes
      };
    }
    
    // –î–ª—è Forex –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if (pair.length === 6 && !pair.includes('USDT')) {
      const axios = require('axios');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º Yahoo Finance API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
      const symbol = `${pair.substring(0, 3)}=X`; // EURUSD -> EUR=X
      
      try {
        console.log(`üì° Fetching Yahoo Finance data for ${symbol}...`);
        const response = await axios.get(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}`, {
          params: {
            interval: '1h',
            range: '30d',
            includePrePost: false
          },
          timeout: 10000
        });
        
        const data = response.data;
        if (data.chart && data.chart.result && data.chart.result[0]) {
          const result = data.chart.result[0];
          const quotes = result.indicators.quote[0];
          const timestamps = result.timestamp;
          
          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–æ—á–µ–∫
          const recentData = timestamps.slice(-limit);
          const prices = recentData.map((_, i) => quotes.close[i + (timestamps.length - limit)]);
          const highs = recentData.map((_, i) => quotes.high[i + (timestamps.length - limit)]);
          const lows = recentData.map((_, i) => quotes.low[i + (timestamps.length - limit)]);
          const volumes = recentData.map((_, i) => quotes.volume[i + (timestamps.length - limit)]);
          
          console.log(`‚úÖ Yahoo Finance data received: ${prices.length} data points`);
          
          return {
            prices: prices.filter(p => p !== null),
            highs: highs.filter(h => h !== null),
            lows: lows.filter(l => l !== null),
            volumes: volumes.filter(v => v !== null)
          };
        }
      } catch (yahooError) {
        console.log(`‚ùå Yahoo Finance failed for ${pair}: ${yahooError.message}`);
      }
      
      // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º ExchangeRate-API —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      try {
        console.log(`üì° Trying ExchangeRate-API historical data for ${pair}...`);
        const base = pair.substring(0, 3);
        const quote = pair.substring(3, 6);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 30);
        
        const response = await axios.get(`https://api.exchangerate-api.com/v4/history/${base}/${startDate.toISOString().split('T')[0]}/${endDate.toISOString().split('T')[0]}`);
        
        if (response.data && response.data.rates) {
          const rates = Object.entries(response.data.rates)
            .filter(([date, _]) => {
              const rateDate = new Date(date);
              return rateDate >= startDate && rateDate <= endDate;
            })
            .sort(([a], [b]) => new Date(a) - new Date(b))
            .slice(-limit);
          
          if (rates.length >= 10) {
            const prices = rates.map(([_, rateData]) => rateData[quote]).filter(rate => rate);
            
            console.log(`‚úÖ ExchangeRate-API historical data received: ${prices.length} data points`);
            
            return {
              prices: prices,
              highs: prices.map(p => p * 1.001), // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
              lows: prices.map(p => p * 0.999),  // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
              volumes: new Array(prices.length).fill(1000000) // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–º—ã
            };
          }
        }
      } catch (exchangeError) {
        console.log(`‚ùå ExchangeRate-API historical failed for ${pair}: ${exchangeError.message}`);
      }
      
      // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º Fixer.io (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω)
      try {
        console.log(`üì° Trying Fixer.io for ${pair}...`);
        const base = pair.substring(0, 3);
        const quote = pair.substring(3, 6);
        
        const response = await axios.get(`https://api.fixer.io/latest`, {
          params: {
            base: base,
            symbols: quote
          },
          timeout: 10000
        });
        
        if (response.data && response.data.rates && response.data.rates[quote]) {
          const currentRate = response.data.rates[quote];
          
          // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
          const prices = [];
          const now = new Date();
          for (let i = limit - 1; i >= 0; i--) {
            const date = new Date(now.getTime() - i * 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
            const hour = date.getHours();
            const variation = (Math.sin(hour / 24 * Math.PI * 2) * 0.001); // –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            prices.push(currentRate * (1 + variation));
          }
          
          console.log(`‚úÖ Fixer.io data received: ${prices.length} data points`);
          
          return {
            prices: prices,
            highs: prices.map(p => p * 1.0005),
            lows: prices.map(p => p * 0.9995),
            volumes: new Array(prices.length).fill(500000)
          };
        }
      } catch (fixerError) {
        console.log(`‚ùå Fixer.io failed for ${pair}: ${fixerError.message}`);
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error fetching historical data:', error);
    return null;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  calculateSMA,
  calculateEMA,
  calculateRSI,
  calculateMACD,
  calculateBollingerBands,
  calculateStochastic,
  analyzeTrend,
  analyzeSignal,
  getHistoricalDataForAnalysis
};
